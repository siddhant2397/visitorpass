# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18i27efVAzIaGFzOqDk-hJdG0oLQrSsUd
"""

import streamlit as st
from pymongo import MongoClient
from datetime import datetime

# -- MongoDB CONNECTION --
client = MongoClient("mongodb://localhost:27017/")
db = client["visitor_app_db"]
users_collection = db["users"]
requests_collection = db["visitor_requests"]

# -- HELPER FUNCTIONS --

def create_default_users():
    if users_collection.count_documents({"username": "admin"}) == 0:
        users_collection.insert_one({"username": "admin", "password": "adminpass", "role": "admin"})
    if users_collection.count_documents({"username": "user1"}) == 0:
        users_collection.insert_one({"username": "user1", "password": "pass1", "role": "user"})

def check_login(username, password):
    user = users_collection.find_one({"username": username, "password": password})
    if user: return user["role"]
    return None

def insert_request(user, visitor_name, contact, visit_date, purpose):
    requests_collection.insert_one({
        "requested_by": user,
        "visitor_name": visitor_name,
        "contact": contact,
        "visit_date": str(visit_date),
        "purpose": purpose,
        "status": "Pending",
        "admin_comment": "",
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M"),
    })

def get_user_requests(user):
    return list(requests_collection.find({"requested_by": user}, {'_id': 0}))

def get_all_requests():
    return list(requests_collection.find({}, {'_id': 0}))

def update_request_status(request_id, status, comment):
    requests_collection.update_one(
        {"timestamp": request_id}, {"$set": {"status": status, "admin_comment": comment}})

# -- INIT SETUP --
create_default_users()

# -- STREAMLIT APP --

def login_section():
    st.sidebar.title("Login")
    username = st.sidebar.text_input("Username")
    password = st.sidebar.text_input("Password", type='password')
    if st.sidebar.button("Login"):
        role = check_login(username, password)
        if role:
            st.session_state["user"] = username
            st.session_state["role"] = role
            st.experimental_rerun()
        else:
            st.sidebar.error("Incorrect username or password.")

def user_section(user):
    st.header("Request a Visitor Pass")
    with st.form("request_form"):
        visitor_name = st.text_input("Visitor Name")
        contact = st.text_input("Contact Number")
        visit_date = st.date_input("Date of Visit")
        purpose = st.text_area("Purpose of Visit")
        submitted = st.form_submit_button("Submit Request")
        if submitted:
            insert_request(user, visitor_name, contact, visit_date, purpose)
            st.success("Request submitted!")

    st.header("My Requests")
    my_reqs = get_user_requests(user)
    if my_reqs:
        st.table(my_reqs)
    else:
        st.info("No requests found.")

def admin_section():
    st.header("All Visitor Pass Requests")
    all_reqs = get_all_requests()
    for req in all_reqs:
        st.markdown(f"**Date:** {req['timestamp']} • **Requestor:** {req['requested_by']} • **Visitor:** {req['visitor_name']} • **Status:** {req['status']}")
        if req['status'] == "Pending":
            col1, col2 = st.columns(2)
            with col1:
                if st.button(f"Approve {req['timestamp']}"):
                    update_request_status(req['timestamp'], "Approved", "Approved")
                    st.experimental_rerun()
            with col2:
                if st.button(f"Reject {req['timestamp']}"):
                    update_request_status(req['timestamp'], "Rejected", "Rejected")
                    st.experimental_rerun()
    st.header("All Requests Table")
    if all_reqs:
        st.table(all_reqs)

def main():
    st.title("Visitor Pass System (MongoDB Version)")
    if "user" not in st.session_state:
        login_section()
        st.stop()
    user = st.session_state["user"]
    role = st.session_state["role"]
    if role == "user":
        user_section(user)
    elif role == "admin":
        admin_section()
    st.sidebar.button("Logout", on_click=lambda: st.session_state.clear())

if __name__ == "__main__":
    main()